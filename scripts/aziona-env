#!/usr/bin/env python3

import sys
import argparse
import os
import getpass
import subprocess
import json

EXPORT = ""

def argsinstance():

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-e",
        "--env",
        required=True,
        type=str,
        help="Env tenant",
    )
    parser.add_argument(
        "-c",
        "--company",
        required=True,
        type=str,
        help="Comapny name",
    )
    parser.add_argument(
        "--config-path",
        required=False,
        default=None,
        type=str,
        help="Tenant path",
    )
    parser.add_argument(
        "--active-path",
        required=False,
        default=None,
        type=str,
        help="Active path",
    )
    parser.add_argument(
        "--aws-role",
        required=False,
        default=None,
        type=str,
        help="AWS role",
    )
    parser.add_argument(
        "--aws-profile",
        required=False,
        default=None,
        type=str,
        help="AWS profile used as credential",
    )
    parser.add_argument(
        "--persistent-active",
        required=False,
        default=False,
        action="store_true",
        help="Active persistent env",
    )
    parser.add_argument(
        "--persistent-deactive",
        required=False,
        default=False,
        action="store_true",
        help="Deactive persistent env",
    )
    parser.add_argument(
        "--aws-serial-number",
        required="--aws-token-code"  in sys.argv,
        default=None,
        type=str,
        help="Deactive persistent env",
    )
    parser.add_argument(
        "--aws-token-code",
        required="--aws-serial-number" in sys.argv,
        default=None,
        type=str,
        help="Deactive persistent env",
    )
    return parser

def default_config_path(company):
  return os.getenv("AZIONA_TENANT_PATH") + "/" + company

def add_to_export(name,value):
    global EXPORT
    EXPORT += f"export {name}='{value}'\n"
    os.environ[name] = value

def assume_role(role, account_id, profile=None, token_code=None, serial_number=None):
    profile = "--profile " + profile if profile else ""
    mfa = ""
    if token_code and serial_number:
        mfa = f"--serial-number {serial_number} --token-code {token_code}"

    command = f"aws {profile} sts assume-role {mfa} --role-arn arn:aws:iam::{account_id}:role/{role} --role-session-name {role}-cli"

    try:
        response = subprocess.check_output(command, shell=True)
        r = json.loads(response.decode().replace("\n", ""))

        add_to_export("AWS_ACCESS_KEY_ID", r["Credentials"]["AccessKeyId"])
        add_to_export("AWS_SESSION_TOKEN", r["Credentials"]["SessionToken"])
        add_to_export("AWS_SECRET_ACCESS_KEY", r["Credentials"]["SecretAccessKey"])
    except subprocess.CalledProcessError as e:
        raise e

def kube_cert(cluster, region, kubeconfig_path, profile=None):
    profile = "--profile " + profile if profile else ""
    p = subprocess.run(f"eksctl utils write-kubeconfig {profile} --cluster {cluster} --region {region} --kubeconfig {kubeconfig_path}", stderr=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
    if p.returncode != 0:
        raise Exception(p.stderr.decode())

def persistent_env_deactive(path):
    with open(path, "w") as f:
        f.write("")

def main():
    args = argsinstance().parse_args()

    # Check args input
    args.config_path = args.config_path or default_config_path(args.company)
    if args.active_path is None:
        if args.persistent_active  is True or args.persistent_deactive is True:
            args.active_path = os.getenv("AZIONA_ACTIVE_PERSISTENT_PATH", None) 
        else: 
            args.active_path = os.getenv("AZIONA_ACTIVE_PATH", None)

    if args.persistent_deactive is True:
        persistent_env_deactive(args.active_path)
        return 0

    if os.path.isdir(args.config_path) is False:
        print("Tenant directory not found: " + args.config_path)
        print("Download tenant settings")
        git_tenant_url = input("Input git repository url: ")

        subprocess.check_call("git clone %s %s" % (git_tenant_url, args.config_path), shell=True)
    
    # file .env tenant
    tenant_path = args.config_path + "/" + args.env + "/.env"
    if os.path.isfile(tenant_path) is False:
        raise Exception("Tenant file not exist: " + tenant_path)

    # import file .env in os and to EXPORT var
    with open(tenant_path, "r") as f:
        for line in f.read().split("\n"):
            if line.startswith("#") or line == "":
                continue
            name, value = line.split("=")
            add_to_export(name,value)
        
    add_to_export("AZIONA_ENABLED", "true")
    add_to_export("CONFIG_TENANT_SETTINGS_PATH",args.config_path)
    add_to_export("KUBECONFIG","%s/%s/.kube/eksctl/clusters/%s" % (os.getenv("HOME"), getpass.getuser(),os.getenv("EKS_CLUSTER_NAME", "")))
    add_to_export("AZIONA_WELCOME_MESSAGE", f"""
****
*
* Welcome into Aziona env
*
****
*
* Comany: {args.company}
* Env: {args.env}
*
****
""")

    if args.aws_role is not None:
        add_to_export("AWS_ROLE",args.aws_role)
        add_to_export("AWS_PROFILE", args.aws_profile or "")
        assume_role(args.aws_role, os.getenv("ACCOUNT_ID"), args.aws_profile, args.aws_token_code, args.aws_serial_number)

    kube_cert(os.getenv("EKS_CLUSTER_NAME"), os.getenv("EKS_AWS_REGION"), os.getenv("KUBECONFIG"), args.aws_profile)

    global EXPORT
    EXPORT += "source " + os.getenv("AZIONA_WORKSPACE_AZIONACLI")  + "/venv/bin/activate > /dev/null 2>&1\n"
    EXPORT += f"echo 'Aziona - env active: {args.env}'\n" 

    with open(args.active_path, "w") as f:
        f.write(EXPORT)

    return 0


if __name__ == "__main__":
    sys.exit(main())
